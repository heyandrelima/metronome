{"version":3,"sources":["assets/click.wav","components/Measure.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Measure","props","zeroTimeout","callback","_useState","useState","_useState2","Object","slicedToArray","clicks","setClicks","_useState3","_useState4","bpm","setBpm","handleKey","event","key","time","Date","valueOf","newClicks","push","toConsumableArray","calculateBpm","clearTimeout","length","difference","newBpm","parseInt","setTimeout","useEffect","document","addEventListener","removeEventListener","react_default","a","createElement","className","type","value","onChange","target","audioUrl","require","Player","playing","setPlaying","audio","Audio","playInterval","setPlayInterval","onClick","clearInterval","pause","setInterval","currentTime","play","App","components_Measure","components_Player","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wJAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yIC2DzBC,EAzDC,SAACC,GAAU,IAInBC,EAHIC,EAAaF,EAAbE,SADeC,EAEKC,mBAAS,IAFdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhBK,EAFgBH,EAAA,GAERI,EAFQJ,EAAA,GAAAK,EAGDN,mBAAS,IAHRO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGhBE,EAHgBD,EAAA,GAGXE,EAHWF,EAAA,GAMjBG,EAAY,SAAAC,GACd,GAAkB,YAAdA,EAAMC,IAAmB,CACzB,IAAMC,GAAO,IAAIC,MAAOC,UAClBC,EAAYZ,EAClBY,EAAUC,KAAK,CAAEJ,SAEjBR,EAAUH,OAAAgB,EAAA,EAAAhB,CAAIc,IACdG,MAWFA,EAAe,WACjBC,aAAavB,GAEb,IAAMwB,EAASjB,EAAOiB,OAChBC,EAAalB,EAAOiB,EAAS,GAAGR,KAAOT,EAAO,GAAGS,KAGjDU,EAASC,SADI,KADHF,EAAaD,GAEL,IAExBZ,EAAOc,GACPzB,EAASyB,GAET1B,EAAc4B,WAAW,WACrBpB,EAAU,KACX,MAWP,OARAqB,oBAAU,WAGN,OAFAC,SAASC,iBAAiB,UAAWlB,GAAW,GAEzC,WACHiB,SAASE,oBAAoB,UAAWnB,GAAW,KAExD,IAGCoB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYC,KAAK,SAASC,MAAO3B,EAAK4B,SAnC5C,SAAAzB,GACf,IAAMY,EAASC,SAASb,EAAM0B,OAAOF,OAErC1B,EAAOc,GACPzB,EAASyB,QCtBXe,EAAWC,EAAQ,IAqCVC,EAnCA,SAAC5C,GACZ,IAAMY,EAAMZ,EAAMY,KAAO,GADHT,EAEQC,oBAAS,GAFjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEf0C,EAFexC,EAAA,GAENyC,EAFMzC,EAAA,GAGhB0C,EAAQ,IAAIC,MAAMN,GAHFhC,EAKkBN,qBALlBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKfuC,EALetC,EAAA,GAKDuC,EALCvC,EAAA,GAyBtB,OACIuB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIxB,EAAJ,QACCiC,EAAUX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAec,QAVhC,WAChBL,GAAW,GACXM,cAAcH,GACdC,IACAH,EAAMM,UAMS,SACLnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcc,QAtB3B,WACfL,GAAW,GAIXI,EAAgBI,YAAY,WACxBP,EAAMQ,YAAc,EACpBR,EAAMS,QAJW,IAAY5C,MAmBvB,UCLH6C,MArBf,WAAe,IAAAtD,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACLS,EADKP,EAAA,GACAQ,EADAR,EAAA,GAOb,OACE6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,wBAGFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACsB,EAAD,CAASxD,SAXO,SAAAyB,GACpBd,EAAOe,SAASD,OAWZO,EAAAC,EAAAC,cAACuB,EAAD,CAAQ/C,IAAKA,OCTDgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5c234fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click.cb99a2a0.wav\";","import React, { useState, useEffect } from 'react';\r\n\r\nconst Measure = (props) => {\r\n    const { callback } = props;\r\n    const [clicks, setClicks] = useState([]);\r\n    const [bpm, setBpm] = useState(60);\r\n    let zeroTimeout;\r\n\r\n    const handleKey = event => {\r\n        if (event.key === 'Control') {\r\n            const time = new Date().valueOf();\r\n            const newClicks = clicks;\r\n            newClicks.push({ time });\r\n\r\n            setClicks([...newClicks]);\r\n            calculateBpm();\r\n        }\r\n    };\r\n\r\n    const handleType = event => {\r\n        const newBpm = parseInt(event.target.value);\r\n\r\n        setBpm(newBpm);\r\n        callback(newBpm);\r\n    };\r\n\r\n    const calculateBpm = () => {\r\n        clearTimeout(zeroTimeout);\r\n\r\n        const length = clicks.length;\r\n        const difference = clicks[length - 1].time - clicks[0].time;\r\n        const average = difference / length;\r\n        const avgSeconds = 1000 / average;\r\n        const newBpm = parseInt(60 * avgSeconds);\r\n\r\n        setBpm(newBpm);\r\n        callback(newBpm);\r\n\r\n        zeroTimeout = setTimeout(() => {\r\n            setClicks([]);\r\n        }, 5000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKey, false);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKey, false);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Type the BPM or tap CTRL to count it</h2>\r\n            <input className=\"bpm-input\" type=\"number\" value={bpm} onChange={handleType} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Measure;","import React, { useState } from 'react';\r\nconst audioUrl = require('../assets/click.wav');\r\n\r\nconst Player = (props) => {\r\n    const bpm = props.bpm || 60;\r\n    const [playing, setPlaying] = useState(false);\r\n    const audio = new Audio(audioUrl);\r\n\r\n    const [playInterval, setPlayInterval] = useState();\r\n\r\n    const handlePlay = () => {\r\n        setPlaying(true);\r\n\r\n        const intervalFreq = 60 * 1000 / bpm;\r\n        \r\n        setPlayInterval(setInterval(() => {\r\n            audio.currentTime = 0;\r\n            audio.play();\r\n        }, intervalFreq));\r\n    };\r\n\r\n    const handlePause = () => {\r\n        setPlaying(false);\r\n        clearInterval(playInterval);\r\n        setPlayInterval();\r\n        audio.pause();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>{bpm} bpm</p>\r\n            {playing ? <button className=\"pause-button\" onClick={handlePause}>Pause</button>\r\n                : <button className=\"play-button\" onClick={handlePlay}>Play</button>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Measure from './components/Measure';\nimport Player from './components/Player';\n\nfunction App() {\n  const [ bpm, setBpm ] = useState(60);\n\n  const handleMeasure = newBpm => {\n    setBpm(parseInt(newBpm));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Metronome</h1>\n      </header>\n\n      <main>\n        <Measure callback={handleMeasure} />\n        <Player bpm={bpm} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}